local Stats = game:GetService('Stats')
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Celery_Util = loadstring(game:HttpGet('https://raw.githubusercontent.com/CeleryHub/CeleryHub/main/CeleUtil.lua'))()
local local_player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local celery_Data = nil
local hit_Sound = nil
local closest_Entity = nil
local parry_remote = nil
local hitsoundidagaugyg84ghun = "8706823799"

getgenv().aura_Enabled = false
getgenv().hit_sound_Enabled = false
getgenv().hit_effect_Enabled = false
getgenv().night_mode_Enabled = false
getgenv().trail_Enabled = false
getgenv().self_effect_Enabled = false

local Services = {
    game:GetService('AdService'),
    game:GetService('SocialService')
}



local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Blade Ball",
    SubTitle = "by Eq Hub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "chevrons-up" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "shopping-cart" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Credits",
        Content = "by Fxdogxd",
        SubContent = "Ugly name lol", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "Menu",
        Content = "Menu.."
    })
























































function resolve_parry_Remote()

    for _, value in Services do

        local temp_remote = value:FindFirstChildOfClass('RemoteEvent')

        if not temp_remote then

            continue

        end

        if not temp_remote.Name:find('\n') then

            continue

        end

        parry_remote = temp_remote

    end

end

local aura_table = {

    canParry = true,

    is_Spamming = false,

    parry_Range = 0,

    spam_Range = 0,  

    hit_Count = 0,

    hit_Time = tick(),

    ball_Warping = tick(),

    is_ball_Warping = false

}

ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()

    if getgenv().hit_sound_Enabled then

        hit_Sound:Play()

    end

    if getgenv().hit_effect_Enabled then

        local hit_effect = game:GetObjects("rbxassetid://18894222844")[1]

        hit_effect.Parent = Celery_Util.getBall()

        hit_effect:Emit(3)

        

        task.delay(5, function()

            hit_effect:Destroy()

        end)

    end

end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()

    aura_table.hit_Count += 1

    task.delay(0.15, function()

        aura_table.hit_Count -= 1

    end)

end)

workspace:WaitForChild("Balls").ChildRemoved:Connect(function(child)

    aura_table.hit_Count = 0

    aura_table.is_ball_Warping = false

    aura_table.is_Spamming = false

end)















    Tabs.Main:AddButton({
        Title = "Auto Parry",
        Description = "PARRY",
        Callback = function()

                getgenv().aura_Enabled = true

        end
    })


 Tabs.Main:AddButton({
        Title = "Stop Parry",
        Description = "PARRY",
        Callback = function()

                getgenv().aura_Enabled = false

        end
    })

   

    
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Range",
        Description = "Set Range to Parry",
        Default = 2,
        Min = 0,
        Max = 50,
        Rounding = 1,
        Callback = function(Value)
        parry_Range = Value
        end
    })

    Slider:OnChanged(function(Value)

        parry_Range = Value

    end)

    Slider:SetValue(3)



    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Mode",
        Values = {"Spam mode", "No spam"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("No spam")

    Dropdown:OnChanged(function(Value)

               if Value == "Spam mode"
               then  
    parry_Range = 100
    is_Spamming = true
    spam_Range = 100
   Fluent:Notify({
        Title = "Eq Hub",
        Content = "Loaded Finish!",
        SubContent = "Spam mode", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })
               end                              
               if Value == "No spam" 
               then
    spam_Range = 0  
    parry_Range = 0
    is_Spamming = false


               end

    end)
end

    








------------------------- Shop







Tabs.Shop:AddButton({
        Title = "Buy SwordCrate",
        Description = "PARRY",
        Callback = function()

    game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalSwordCrate)

        end
    })

Tabs.Shop:AddButton({
        Title = "Buy ExplosionCrate",
        Description = "PARRY",
        Callback = function()

    game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalExplosionCrate)

        end
    })
  local Dropdown = Tabs.Shop:AddDropdown("Dropdown", {
        Title = "Auto buy",
        Values = {"Auto buy SwordCrate", "Stop Auto buy SwordCrate", "Auto buy ExplosionCrate", "Stop Auto buy ExplosionCrate"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("Stop Auto buy SwordCrate")

    Dropdown:OnChanged(function(Value)


if Value == "Auto buy SwordCrate" then
_G.AutoSword = true

while _G.AutoSword do

game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalSwordCrate)

wait(1)

end

end





if Value == "Auto buy ExplosionCrate" then
_G.AutoSwor = true

while _G.AutoSwor do

    game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalExplosionCrate)

wait(1)

end


end

if Value == "Stop Auto buy SwordCrate" then
_G.AutoSword = false



end





if Value == "Stop Auto buy ExplosionCrate" then
_G.AutoSwor = false



end













    end)











    

Window:SelectTab(1)

Fluent:Notify({
    Title = "Eq Hub",
    Content = "The script has been loaded.",
    Duration = 8
})
